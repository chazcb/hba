Week1:
Completed backend:
	- set up sqlite3 db
	- set up insert_test_data.sql script to populate with test data
	- designed schema - see schema_erd.png
	- set up model.py
	- set up controller: list_app.py, set up flask framework
	- wrote entrez_gene_update.py to populate genes table from NCBI ftp
Completed UI features:
	- set up base.html using css nav-bar styling
	- login.html page: set up error checking for non-existing or incorrect username or incorrect password
	- signup.html page: set up error checking for existing username or email address
	- user.html page: display user profile
	- downloaded ideogram html pages and depencencies from MD Anderson and integrated in Flask framework
	- set up bare bone index.html
	- view.html page: 
		- functional links to display ideogram for each list
		- ajax pop up to view gene details of list.onclick
			- added tablesorter.js to enable sorting using jQuery
		- display tags, date created and owner for list
	- started newlist.html

Week2:
Completed backend:
	- parsing uploaded file
Completed UI features:
	- newlist page: file upload, new tags, 
	- add user tags: https://twitter.github.io/typeahead.js/examples/
	- implemented modals: http://getbootstrap.com/javascript/#modals
	- file input onChange

Week3:
Completed backend:
	- new list file validation logic, used SQLAlchemy - then switched to SQL for >100x speed gain (26s -> 0.2s)
Completed UI feature:
	- newlist page: gene ID/name verification

Week3 plan:
	- generate list collection
	- give list access to collaborators
	- advanced search features: by gene, by tag (use hash in url?)
	- integrate mSigDB: http://www.broadinstitute.org/gsea/msigdb/collections.jsp
	- integrate geneid history

Stretch goals:
	- set enrichment calculation (workflow)
	- set enrichment data access (UI)
	- new results alerts (notifications)
	- scrape papers (PDF/spreadsheets)
	- newlist page: modify schema to add column attributes in uploaded files

Nice to haves:
	- tag cloud viz
	- D3 viz of list connections
	- heatmap.js on genomic view
	- lucene/solr/elasticsearch based search
	- czf suggestion on SQL refactoring - avoid load to temp table
		- set(id_list)
		- set(select id from g where id in id_list)
		- http://stackoverflow.com/questions/17972020/how-to-execute-raw-sql-in-sqlalchemy-flask-app

References
Javascript Fiddle: http://jsfiddle.net/
http://microjs.com/
http://nakupanda.github.io/bootstrap3-dialog/
http://www.tutorials2learn.com/tutorials/scripts/javascript/showmodaldialog-send-and-return-values.html
http://stackoverflow.com/questions/20723111/passing-data-to-bootstrap-3-modal
http://blueimp.github.io/jQuery-File-Upload/

http://stackoverflow.com/questions/8995989/get-uploaded-file-content-with-javascript
Upload the file using post to a url for ex. http://a.b/c
Read the file at the server side. Lets suppose you have another URL such as http://a.b/getcontent which reads that file at server side & replies with the content.
You send an AJAX request to /getcontent URL and receive the reply.
Change the HTML using javascript accordingly.

http://stackoverflow.com/questions/3034845/accessing-contents-of-a-file-in-a-web-application-without-uploading

TCGA 2014 symposium
https://www.youtube.com/watch?v=jVdyAb0jVo0